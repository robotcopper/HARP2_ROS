bt_navigator:
  ros__parameters:
    use_sim_time: true
    global_frame: map
    robot_base_frame: base_footprint
    transform_tolerance: 0.1
    default_nav_to_pose_bt_xml: "$(find-pkg-share robot_nav)/behavior_tree/navigate_to_pose_w_replanning_and_recovery.xml"
    default_nav_through_poses_bt_xml: "$(find-pkg-share robot_nav)/behavior_tree/navigate_through_poses_w_replanning_and_recovery.xml"
    always_reload_bt_xml: false
    bt_loop_duration: 10
    default_server_timeout: 20
    goal_reached_tol: 0.025
    goal_blackboard_id: goal
    goals_blackboard_id: goals
    path_blackboard_id: path
    navigators: ['navigate_to_pose', 'navigate_through_poses']
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator" # In Iron and older versions, "/" was used instead of "::"
    navigate_through_poses:
      plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator" # In Iron and older versions, "/" was used instead of "::"
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code
      # - smoother_error_code, navigate_to_pose_error_code, navigate_through_poses_error_code, etc


controller_server:
  ros__parameters:
    use_sim_time: true
    controller_frequency: 50.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.1
    progress_checker_plugin: "ProgressChecker" #"progress_checker"
    goal_checker_plugins: ["GoalChecker"] #["general_goal_checker"["general_goal_checker"] # ]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    # progress_checker:
    #   plugin: "nav2_controller::SimpleProgressChecker"
    #   required_movement_radius: 0.05
    #   movement_time_allowance: 10.0
    ProgressChecker:
      plugin: "nav2_controller::PoseProgressChecker"
      required_movement_radius: 0.05
      required_movement_angle: 0.05
      movement_time_allowance: 10.0

    # Goal checker parameters
    GoalChecker:
      plugin: "nav2_controller::StoppedGoalChecker"
      stateful: True
      xy_goal_tolerance: 0.05 
      yaw_goal_tolerance: 0.05 
      rot_stopped_velocity: 0.05
      trans_stopped_velocity: 0.05

    FollowPath:

      # plugin: "nav2_rotation_shim_controller::RotationShimController"
      # angular_dist_threshold: 0.1
      # forward_sampling_distance: 0.1
      # rotate_to_heading_angular_vel: 2.8
      # max_angular_accel: 1.4
      # simulate_ahead_time: 0.2

      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 20
      model_dt: 0.035
      batch_size: 1000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.2
      vx_max: 0.50
      vx_min: -0.50
      vy_max: 0.5
      wz_max: 1.9
      # vx_max: 1.0
      # vx_min: -1.0
      # vy_max: 1.0
      # wz_max: 1.9
      iteration_count: 1
      prune_distance: 4.0
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "Omni"
      visualize: true
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      TrajectoryVisualizer:
        trajectory_step: 100
        time_step: 100
      AckermannConstraints:
        min_turning_r: 0.0
      critics: ["GoalCritic", "GoalAngleCritic", "ObstaclesCritic", "TwirlingCritic", "PathFollowCritic"] #[ "ConstraintCritic", "GoalCritic", "GoalAngleCritic","ObstaclesCritic", "TwirlingCritic", "PreferForwardCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic"]
      
      # ConstraintCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 4.0
      
      GoalCritic:
        enabled: true
        cost_power: 3
        cost_weight: 5.0
        threshold_to_consider: 0.3
      
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.3
      
      # PreferForwardCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   threshold_to_consider: 0.1
      
      ObstaclesCritic:
        enabled: true
        cost_power: 3
        repulsion_weight: 20.5
        critical_weight: 20.0
        consider_footprint: True
        collision_cost: 10000.0
        collision_margin_distance: 0.24
        near_goal_distance: 0.2
        inflation_radius: 0.22 # (only in Humble)
        cost_scaling_factor: 10.0 # (only in Humble)
      
      # PathAlignCritic:
      #   enabled: true
      #   cost_power: 3
      #   cost_weight: 14.0
      #   max_path_occupancy_ratio: 0.07
      #   trajectory_point_step: 4
      #   threshold_to_consider: 0.1
      #   offset_from_furthest: 33
      #   use_path_orientations: false
      
      PathFollowCritic:
        enabled: true
        cost_power: 2
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 0.3
      
      # PathAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 10.0
      #   offset_from_furthest: 33
      #   threshold_to_consider: 0.1
      #   max_angle_to_furthest: 1.0
      #   mode: 0
      
      # VelocityDeadbandCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 35.0
      #   deadband_velocities: [0.05, 0.05, 0.05]
      
      TwirlingCritic:
        enabled: true
        twirling_cost_power: 1
        twirling_cost_weight: 2.0


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 20.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_footprint
      use_sim_time: True
      rolling_window: true
      width: 2
      height: 2
      resolution: 0.05
      robot_radius: 0.22
      always_send_full_costmap: True
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"] # "range_layer"
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        footprint_clearing_enabled: True
        max_obstacle_height: 2.0
        combination_method: 1
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          inf_is_valid: False
      
      # range_layer:
      #   plugin: "nav2_costmap_2d::RangeLayer" 
      #   enabled: True
      #   topic: ["/range_topic1","/range_topic2"]
      #   phi: 1.2
      #   inflate_cone: 1.0
      #   no_readings_timeout: 0.0
      #   clear_threshold: 0.2
      #   mark_threshold: 0.8
      #   clear_on_max_reading: False
      #   input_sensor_type: "ALL"

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        enabled: true
        subscribe_to_updates: False
        transform_tolerance: 0.1
      
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.10
        cost_scaling_factor: 10.0
        inflate_unknown: False
        inflate_around_unknown: False


global_costmap:
  global_costmap:
    ros__parameters:
      footprint_padding: 0.01
      update_frequency: 5.0
      publish_frequency: 2.0
      transform_tolerance: 0.3
      global_frame: map
      map_topic: "/map"
      lethal_cost_threshold: 100
      robot_base_frame: base_footprint
      use_sim_time: True
      robot_radius: 0.2 # radius set and used, so no footprint points
      width: 5
      height: 5
      origin_x: 0.0
      origin_y: 0.0
      resolution: 0.05
      trinary_costmap: True
      track_unknown_space: False
      unknown_cost_value: 255
      use_maximum: False
      always_send_full_costmap: True
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"] # "range_layer"
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        footprint_clearing_enabled: True
        max_obstacle_height: 2.0
        combination_method: 1
        scan:
          topic: /scan
          sensor_frame: "ydlidarx4_laser_frame"
          observation_persistence: 0.0
          expected_update_rate: 0.0
          obstacle_max_range: 10.0
          obstacle_min_range: 0.00
          raytrace_max_range: 10.0
          raytrace_min_range: 0.00
          max_obstacle_height: 1.0
          min_obstacle_height: 0.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          inf_is_valid: False
      
      # range_layer:
      #   plugin: "nav2_costmap_2d::RangeLayer" 
      #   enabled: True
      #   topic: ["/range_topic1","/range_topic2"]
      #   phi: 1.2
      #   inflate_cone: 1.0
      #   no_readings_timeout: 0.0
      #   clear_threshold: 0.2
      #   mark_threshold: 0.8
      #   clear_on_max_reading: False
      #   input_sensor_type: "ALL"

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        enabled: true
        subscribe_to_updates: False
        transform_tolerance: 0.1
      
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.10
        cost_scaling_factor: 10.0
        inflate_unknown: False
        inflate_around_unknown: False


planner_server:
  ros__parameters:
    expected_planner_frequency: 30.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_theta_star_planner/ThetaStarPlanner" # In Iron and older versions, "/" was used instead of "::"
      how_many_corners: 8
      w_euc_cost: 1.0
      w_traversal_cost: 2.0
      w_heuristic_cost: 1.0
      use_final_approach_orientation: True


waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0


velocity_smoother: # don't forget to assign a y-value for omnidirectional robots
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 30.0 # Rate to run smoother
    scale_velocities: false # scale velocities proportionally if any axis is outside of acceleration range to follow same vector, if possible
    feedback: "OPEN_LOOP" # Type of feedback for current speed. Open loop uses the last smoothed output. Closed loop uses robot odometry
    max_velocity: [1.4, 1.4, 1.4] # Maximum velocities, ordered [Vx, Vy, Vw]
    min_velocity: [-1.4, -1.4, -1.4] # Minimum velocities, ordered [Vx, Vy, Vw]
    deadband_velocity: [0.0, 0.0, 0.0] # A deadband of velocities below which they should be zero-ed out for sending to the robot base controller, ordered [Vx, Vy, Vw]
    velocity_timeout: 1.0 # Time (s) after which if no new velocity commands are received to zero out and stop
    max_accel: [0.5, 0.5, 0.5] # Maximum acceleration, ordered [Ax, Ay, Aw]
    max_decel: [-0.5, -0.5, -0.5] # Maximum deceleration, ordered [Ax, Ay, Aw]
    odom_topic: "odom" # Topic of odometry to use for estimating current velocities
    odom_duration: 0.01 # Period of time (s) to sample odometry information in for velocity estimation
    use_realtime_priority: false
    enable_stamped_cmd_vel: false


