bt_navigator:
  ros__parameters:
    use_sim_time: true
    global_frame: map
    robot_base_frame: base_footprint
    transform_tolerance: 0.1
    default_nav_to_pose_bt_xml: "$(find-pkg-share robot_nav)/behavior_tree/navigate_to_pose_w_replanning_and_recovery.xml"
    default_nav_through_poses_bt_xml: "$(find-pkg-share robot_nav)/behavior_tree/navigate_through_poses_w_replanning_and_recovery.xml"
    always_reload_bt_xml: false
    bt_loop_duration: 10
    default_server_timeout: 20
    goal_blackboard_id: goal
    goals_blackboard_id: goals
    path_blackboard_id: path
    navigators: ['navigate_to_pose', 'navigate_through_poses']
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator" # In Iron and older versions, "/" was used instead of "::"
    navigate_through_poses:
      plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator" # In Iron and older versions, "/" was used instead of "::"
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code
      # - smoother_error_code, navigate_to_pose_error_code, navigate_through_poses_error_code, etc


# controller_server:
#   ros__parameters:
#     use_sim_time: True
#     controller_frequency: 40.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.001
#     min_theta_velocity_threshold: 0.001
#     failure_tolerance: 0.3

#     progress_checker_plugins: ["progress_checker"] # progress_checker_plugin: "progress_checker" For Humble and older
#     goal_checker_plugins: ["goal_checker"] # goal_checker_plugin: "goal_checker" For Galactic and older
#     controller_plugins: ["FollowPath"]

#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.01
#       movement_time_allowance: 10.0

#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.05
#       yaw_goal_tolerance: 0.05
#       stateful: True

controller_server:
  ros__parameters:
    use_sim_time: true
    controller_frequency: 50.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.1
    progress_checker_plugin: "ProgressChecker" #"progress_checker"
    goal_checker_plugins: ["GoalChecker"] #["general_goal_checker"["general_goal_checker"] # ]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    # progress_checker:
    #   plugin: "nav2_controller::SimpleProgressChecker"
    #   required_movement_radius: 0.05
    #   movement_time_allowance: 10.0
    ProgressChecker:
      plugin: "nav2_controller::PoseProgressChecker"
      required_movement_radius: 0.05
      required_movement_angle: 0.05
      movement_time_allowance: 10.0

    # Goal checker parameters
    GoalChecker:
      plugin: "nav2_controller::StoppedGoalChecker"
      stateful: True
      xy_goal_tolerance: 0.05 
      yaw_goal_tolerance: 0.05 
      rot_stopped_velocity: 0.05
      trans_stopped_velocity: 0.05

    FollowPath:

      # plugin: "nav2_rotation_shim_controller::RotationShimController"
      # angular_dist_threshold: 0.1
      # forward_sampling_distance: 0.1
      # rotate_to_heading_angular_vel: 2.8
      # max_angular_accel: 1.4
      # simulate_ahead_time: 0.2

      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 10
      model_dt: 0.035
      batch_size: 1000
      vx_std: 0.2
      vy_std: 0.1
      wz_std: 0.2
      vx_max: 1.0
      vx_min: -1.0
      vy_max: 1.0
      wz_max: 1.9
      iteration_count: 1
      prune_distance: 4.0
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "Omni"
      visualize: true
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      TrajectoryVisualizer:
        trajectory_step: 100
        time_step: 100
      AckermannConstraints:
        min_turning_r: 0.0
      critics: ["GoalCritic", "GoalAngleCritic", "ObstaclesCritic", "TwirlingCritic", "PathFollowCritic"] #[ "ConstraintCritic", "GoalCritic", "GoalAngleCritic","ObstaclesCritic", "TwirlingCritic", "PreferForwardCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic"]
      
      # ConstraintCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 4.0
      
      GoalCritic:
        enabled: true
        cost_power: 3
        cost_weight: 5.0
        threshold_to_consider: 0.3
      
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.3
      
      # PreferForwardCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   threshold_to_consider: 0.1
      
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 10.5
        critical_weight: 20.0
        consider_footprint: false
        collision_cost: 10000.0
        collision_margin_distance: 0.2
        near_goal_distance: 0.2
        inflation_radius: 0.5 # (only in Humble)
        cost_scaling_factor: 10.0 # (only in Humble)
      
      # PathAlignCritic:
      #   enabled: true
      #   cost_power: 3
      #   cost_weight: 14.0
      #   max_path_occupancy_ratio: 0.07
      #   trajectory_point_step: 4
      #   threshold_to_consider: 0.1
      #   offset_from_furthest: 33
      #   use_path_orientations: false
      
      PathFollowCritic:
        enabled: true
        cost_power: 3
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 0.3
      
      # PathAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 10.0
      #   offset_from_furthest: 33
      #   threshold_to_consider: 0.1
      #   max_angle_to_furthest: 1.0
      #   mode: 0
      
      # VelocityDeadbandCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 35.0
      #   deadband_velocities: [0.05, 0.05, 0.05]
      
      TwirlingCritic:
        enabled: true
        twirling_cost_power: 1
        twirling_cost_weight: 2.0



# controller_server:
#   ros__parameters:
#     use_sim_time: true
#     controller_frequency: 30.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     failure_tolerance: 0.1
#     progress_checker_plugin: "progress_checker"
#     goal_checker_plugins: ["GoalChecker"] #["general_goal_checker"["general_goal_checker"] # ]
#     controller_plugins: ["FollowPath"]

#     # Progress checker parameters
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.05
#       movement_time_allowance: 10.0

#     # Goal checker parameters
#     GoalChecker:
#       plugin: "nav2_controller::StoppedGoalChecker"
#       stateful: True
#       xy_goal_tolerance: 0.05 
#       yaw_goal_tolerance: 0.05 
#       rot_stopped_velocity: 0.05
#       trans_stopped_velocity: 0.05
#     # precise_goal_checker:
#     #   plugin: "nav2_controller::SimpleGoalChecker"
#     #   xy_goal_tolerance: 0.05
#     #   yaw_goal_tolerance: 0.05
#     #   stateful: True
#     # general_goal_checker:
#     #   stateful: true
#     #   plugin: "nav2_controller::SimpleGoalChecker"
#     #   xy_goal_tolerance: 0.05
#     #   yaw_goal_tolerance: 0.05

#     # DWB parameters
#     FollowPath:
#       plugin: "nav2_rotation_shim_controller::RotationShimController"
#       primary_controller: "dwb_core::DWBLocalPlanner"
#       angular_dist_threshold: 360.0 #0.785
#       forward_sampling_distance: 0.05
#       rotate_to_heading_angular_vel: 2.8
#       max_angular_accel: 3.2
#       simulate_ahead_time: 0.2 #1.0
#     # FollowPath:
#     #   plugin: "nav2_rotation_shim_controller::RotationShimController"
#     #   angular_dist_threshold: 0.1 #0.785
#     #   forward_sampling_distance: 0.9
#     #   rotate_to_heading_angular_vel: 2.8
#     #   max_angular_accel: 1.0
#     #   simulate_ahead_time: 0.2
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: true
#       min_vel_x: -1.4
#       min_vel_y: -1.4
#       max_vel_x: 1.4
#       max_vel_y: 1.4
#       max_vel_theta: 0.75
#       min_speed_xy: -1.4
#       max_speed_xy: 1.4
#       min_speed_theta: -0.75
#       # Add high threshold velocity for turtlebot 3 issue.
#       # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
#       acc_lim_x: 4.5
#       acc_lim_y: 4.5
#       acc_lim_theta: 6.5
#       decel_lim_x: -4.5
#       decel_lim_y: -4.5
#       decel_lim_theta: -6.4
#       vx_samples: 20
#       vy_samples: 20
#       vtheta_samples: 20
#       sim_time: 0.5 #1.7
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.25
#       yaw_goal_tolerance: 0.25
#       trans_stopped_velocity: 0.25
#       short_circuit_trajectory_evaluation: True
#       stateful: true
#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 2.2
#       PathAlign.scale: 20.0
#       PathAlign.forward_point_distance: 0.1
#       GoalAlign.scale: 10.0
#       GoalAlign.forward_point_distance: 0.1
#       PathDist.scale: 300.0
#       GoalDist.scale: 300.0
#       RotateToGoal.scale: 0.1
#       RotateToGoal.slowing_factor: 5.0
#       RotateToGoal.lookahead_time: -1.0
#       # plugin: "dwb_core::DWBLocalPlanner"
#       # debug_trajectory_details: True
#       # min_vel_x: -1.4
#       # min_vel_y: -1.4
#       # max_vel_x: 1.4
#       # max_vel_y: 1.4
#       # max_vel_theta: 2.0
#       # min_speed_xy: -1.4
#       # max_speed_xy: 2.4
#       # min_speed_theta: -3.0
#       # # Add high threshold velocity for turtlebot 3 issue.
#       # # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
#       # acc_lim_x: 0.5
#       # acc_lim_y: 0.5
#       # acc_lim_theta: 1.2
#       # decel_lim_x: -0.5
#       # decel_lim_y: -0.5
#       # decel_lim_theta: -2.2
#       # vx_samples: 40
#       # vy_samples: 40
#       # vtheta_samples: 40
#       # sim_time: 1.0
#       # linear_granularity: 0.025
#       # angular_granularity: 0.025
#       # transform_tolerance: 0.1
#       # xy_goal_tolerance: 0.1
#       # trans_stopped_velocity: 0.17
#       # short_circuit_trajectory_evaluation: True
#       # stateful: True
#       # critics: ["Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]

#       # BaseObstacle.scale: 1.0

#       # GoalAlign.scale: 10.0
#       # GoalAlign.forward_point_distance: 0.01

#       # GoalDist.scale: 10.0

#       # PathAlign.scale: 320.0
#       # PathAlign.forward_point_distance: 0.01

#       # PathDist.scale: 10.0

#       # RotateToGoal.xy_goal_tolerance: 0.1
#       # RotateToGoal.trans_stopped_velocity: 0.7
#       # RotateToGoal.scale: 2.0
#       # RotateToGoal.slowing_factor: 5.0
#       # RotateToGoal.lookahead_time: 1.0

#       # Oscillation.oscillation_reset_dist: 0.1


# controller_server:
#   ros__parameters:
#     use_sim_time: True
#     controller_frequency: 20.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     progress_checker_plugin: "progress_checker"
#     goal_checker_plugin: "goal_checker"
#     controller_plugins: ["FollowPath"]

#     # Progress checker parameters
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     # Goal checker parameters
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.15
#       yaw_goal_tolerance: 0.15
#       stateful: True
#     # DWB parameters
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       min_vel_x: -0.26
#       min_vel_y: -0.26
#       max_vel_x: 0.26
#       max_vel_y: 0.26
#       max_vel_theta: 1.0
#       min_speed_xy: -0.26
#       max_speed_xy: 0.26
#       min_speed_theta: -1.0
#       # Add high threshold velocity for turtlebot 3 issue.
#       # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
#       acc_lim_x: 2.5
#       acc_lim_y: 2.5
#       acc_lim_theta: 3.2
#       decel_lim_x: -2.5
#       decel_lim_y: -2.5
#       decel_lim_theta: -3.2
#       vx_samples: 20
#       vy_samples: 5
#       vtheta_samples: 20
#       sim_time: 1.7
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.15
#       trans_stopped_velocity: 0.25
#       short_circuit_trajectory_evaluation: True
#       stateful: True
#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 0.02
#       PathAlign.scale: 0.1
#       PathAlign.forward_point_distance: 0.1
#       GoalAlign.scale: 0.1
#       GoalAlign.forward_point_distance: 0.1
#       PathDist.scale: 152.0
#       GoalDist.scale: 24.0
#       RotateToGoal.scale: 12.0
#       RotateToGoal.slowing_factor: 5.0
#       RotateToGoal.lookahead_time: -1.0


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 20.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_footprint
      use_sim_time: True
      rolling_window: true
      width: 1
      height: 1
      resolution: 0.05
      robot_radius: 0.22
      plugins: ["voxel_layer", "inflation_layer", "static_layer"]
      
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.01
      
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 10.0
          obstacle_min_range: 0.0
      
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True


global_costmap:
  global_costmap:
    ros__parameters:
      footprint_padding: 0.01
      update_frequency: 2.0
      publish_frequency: 2.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: True
      robot_radius: 0.2 # radius set and used, so no footprint points
      resolution: 0.05
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"] # ["static_layer", "obstacle_layer", "voxel_layer", "inflation_layer"]
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        footprint_clearing_enabled: true
        max_obstacle_height: 2.0
        combination_method: 1
        scan:
          topic: /scan
          obstacle_max_range: 10.0
          obstacle_min_range: 0.00
          raytrace_max_range: 10.0
          raytrace_min_range: 0.00
          max_obstacle_height: 12.0
          min_obstacle_height: 0.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          inf_is_valid: false
      
      # voxel_layer: # costmap layer implements a plugin that uses 3D raycasting for depth
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: True
      #   footprint_clearing_enabled: true
      #   max_obstacle_height: 2.0
      #   publish_voxel_map: True
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   max_obstacle_height: 2.0
      #   unknown_threshold: 15
      #   mark_threshold: 0
      #   observation_sources: pointcloud
      #   combination_method: 1
      #   pointcloud:  # no frame set, uses frame from message
      #     topic: /intel_realsense_r200_depth/points
      #     max_obstacle_height: 2.0
      #     min_obstacle_height: 0.0
      #     obstacle_max_range: 2.5
      #     obstacle_min_range: 0.0
      #     raytrace_max_range: 3.0
      #     raytrace_min_range: 0.0
      #     clearing: True
      #     marking: True
      #     data_type: "PointCloud2"
      
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.1
      
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.15
        cost_scaling_factor: 5.0
        inflate_unknown: false
        inflate_around_unknown: true
      always_send_full_costmap: True


# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 30.0
#     use_sim_time: True
#     planner_plugins: ["GridBased"]

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerHybrid"
#       tolerance: 0.03                      # tolerance for planning if unable to reach exact pose, in meters
#       downsample_costmap: false           # whether or not to downsample the map
#       downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       allow_unknown: false                # allow traveling in unknown space
#       max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance
#       max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
#       motion_model_for_search: "DUBIN"    # For Hybrid Dubin, Redds-Shepp
#       cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
#       angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
#       analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
#       analytic_expansion_max_length: 0.20    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
#       minimum_turning_radius: 0.04        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
#       reverse_penalty: 2.1                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
#       non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
#       cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#       retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
#       rotation_penalty: 3.0               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
#       lookup_table_size: 5.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
#       cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.  
#       allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.   
#       smooth_path: true                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 30.0
#     use_sim_time: true
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.05
#       use_astar: false
#       allow_unknown: true

planner_server:
  ros__parameters:
    expected_planner_frequency: 30.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_theta_star_planner/ThetaStarPlanner" # In Iron and older versions, "/" was used instead of "::"
      how_many_corners: 8
      w_euc_cost: 1.0
      w_traversal_cost: 2.0
      w_heuristic_cost: 1.0
      use_final_approach_orientation: false
      

# smoother_server:
#   ros__parameters:
#     costmap_topic: global_costmap/costmap_raw
#     footprint_topic: global_costmap/published_footprint
#     robot_base_frame: base_footprint
#     transform_timeout: 0.1
#     smoother_plugins: ["simple_smoother"]
#     simple_smoother:
#       plugin: "nav2_smoother::SimpleSmoother"
#       tolerance: 1.0e-10
#       max_its: 1000
#       do_refinement: True


# behavior_server:
#   ros__parameters:
#     local_costmap_topic: local_costmap/costmap_raw
#     local_footprint_topic: local_costmap/published_footprint
#     global_costmap_topic: global_costmap/costmap_raw
#     global_footprint_topic: global_costmap/published_footprint
#     cycle_frequency: 10.0
#     behavior_plugins: ["spin", "backup", "drive_on_heading", "wait", "assisted_teleop"]
#     spin:
#       plugin: "nav2_behaviors/Spin" # In Iron and older versions, "/" was used instead of "::"
#     backup:
#       plugin: "nav2_behaviors/BackUp" # In Iron and older versions, "/" was used instead of "::"
#     drive_on_heading:
#       plugin: "nav2_behaviors/DriveOnHeading" # In Iron and older versions, "/" was used instead of "::"
#     wait:
#       plugin: "nav2_behaviors/Wait" # In Iron and older versions, "/" was used instead of "::"
#     assisted_teleop:
#       plugin: "nav2_behaviors/AssistedTeleop" # In Iron and older versions, "/" was used instead of "::"
#     local_frame: odom
#     global_frame: map
#     robot_base_frame: base_footprint
#     transform_timeout: 0.1
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 1.0
#     min_rotational_vel: 0.4
#     rotational_acc_lim: 3.2
#     enable_stamped_cmd_vel: false


waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0


velocity_smoother: # don't forget to assign a y-value for omnidirectional robots
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 30.0 # Rate to run smoother
    scale_velocities: false # scale velocities proportionally if any axis is outside of acceleration range to follow same vector, if possible
    feedback: "OPEN_LOOP" # Type of feedback for current speed. Open loop uses the last smoothed output. Closed loop uses robot odometry
    max_velocity: [1.4, 1.4, 1.4] # Maximum velocities, ordered [Vx, Vy, Vw]
    min_velocity: [-1.4, -1.4, -1.4] # Minimum velocities, ordered [Vx, Vy, Vw]
    deadband_velocity: [0.0, 0.0, 0.0] # A deadband of velocities below which they should be zero-ed out for sending to the robot base controller, ordered [Vx, Vy, Vw]
    velocity_timeout: 1.0 # Time (s) after which if no new velocity commands are received to zero out and stop
    max_accel: [0.5, 0.5, 0.5] # Maximum acceleration, ordered [Ax, Ay, Aw]
    max_decel: [-0.5, -0.5, -0.5] # Maximum deceleration, ordered [Ax, Ay, Aw]
    odom_topic: "odom" # Topic of odometry to use for estimating current velocities
    odom_duration: 0.01 # Period of time (s) to sample odometry information in for velocity estimation
    use_realtime_priority: false
    enable_stamped_cmd_vel: false


